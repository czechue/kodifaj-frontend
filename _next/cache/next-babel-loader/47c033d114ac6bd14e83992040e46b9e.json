{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport middleware from '../../../middlewares/middleware';\nimport Task from '../../../models/task/task.schema';\nimport Solution from '../../../models/solution/solutions.schema';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.get(async (req, res) => {\n  try {\n    const task = await Task.findById(req.query.taskId).populate('_user');\n    const solutions = await Solution.find({\n      _task: req.query.taskId\n    }).populate('_user');\n    return Promise.all([task, solutions]).then(([taskRes, solutionsRes]) => {\n      return res.send(_objectSpread({}, taskRes === null || taskRes === void 0 ? void 0 : taskRes._doc, {\n        solutions: solutionsRes\n      }));\n    });\n  } catch (error) {\n    res.status(400).json(error);\n  }\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jundymek/dev/kodifaj/kodifaj-frontend/pages/api/tasks/[taskId].ts"],"names":["nextConnect","middleware","Task","Solution","handler","use","get","req","res","task","findById","query","taskId","populate","solutions","find","_task","Promise","all","then","taskRes","solutionsRes","send","_doc","error","status","json"],"mappings":";;;;;;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AAEA,OAAOC,UAAP,MAAuB,iCAAvB;AAEA,OAAOC,IAAP,MAAiB,kCAAjB;AACA,OAAOC,QAAP,MAAqB,2CAArB;AAEA,MAAMC,OAAO,GAAGJ,WAAW,EAA3B;AACAI,OAAO,CAACC,GAAR,CAAYJ,UAAZ;AAEAG,OAAO,CAACE,GAAR,CACE,OAAOC,GAAP,EAA4BC,GAA5B,KAAgF;AAC9E,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMP,IAAI,CAACQ,QAAL,CAAcH,GAAG,CAACI,KAAJ,CAAUC,MAAxB,EAAgCC,QAAhC,CAAyC,OAAzC,CAAnB;AACA,UAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACY,IAAT,CAAc;AAAEC,MAAAA,KAAK,EAAET,GAAG,CAACI,KAAJ,CAAUC;AAAnB,KAAd,EAA2CC,QAA3C,CAAoD,OAApD,CAAxB;AACA,WAAOI,OAAO,CAACC,GAAR,CAAY,CAACT,IAAD,EAAOK,SAAP,CAAZ,EAA+BK,IAA/B,CAAoC,CAAC,CAACC,OAAD,EAAUC,YAAV,CAAD,KAA6B;AACtE,aAAOb,GAAG,CAACc,IAAJ,mBACFF,OADE,aACFA,OADE,uBACFA,OAAO,CAAEG,IADP;AAELT,QAAAA,SAAS,EAAEO;AAFN,SAAP;AAID,KALM,CAAP;AAMD,GATD,CASE,OAAOG,KAAP,EAAc;AACdhB,IAAAA,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,KAArB;AACD;AACF,CAdH;AAiBA,eAAepB,OAAf","sourcesContent":["import nextConnect from 'next-connect';\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport middleware from '../../../middlewares/middleware';\nimport { Document } from 'mongoose';\nimport Task from '../../../models/task/task.schema';\nimport Solution from '../../../models/solution/solutions.schema';\n\nconst handler = nextConnect();\nhandler.use(middleware);\n\nhandler.get(\n  async (req: NextApiRequest, res: NextApiResponse<Document[]>): Promise<void> => {\n    try {\n      const task = await Task.findById(req.query.taskId).populate('_user');\n      const solutions = await Solution.find({ _task: req.query.taskId }).populate('_user');\n      return Promise.all([task, solutions]).then(([taskRes, solutionsRes]) => {\n        return res.send({\n          ...taskRes?._doc,\n          solutions: solutionsRes,\n        });\n      });\n    } catch (error) {\n      res.status(400).json(error);\n    }\n  },\n);\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}