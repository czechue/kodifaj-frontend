{"ast":null,"code":"var _jsxFileName = \"/home/czechue/Documents/kodifaj-frontend/packages/frontend/components/task/details/solutions/newSolutionForm/NewSolutionForm.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button, { ButtonLayout } from '../../../../shared/button/Button';\nimport Select from 'react-select';\nimport { formStyles } from './formStyles';\nimport clsx from 'clsx';\nimport NewSolutionFormInput from './newSolutionFormInput/NewSolutionFormInput';\nimport { Form, Field } from 'react-final-form';\nimport { correctUrlValidator } from '../../../../../utils/validators/correctUrlValidator';\nimport { required } from '../../../../../utils/validators/requiredValidator';\nimport { composeValidators } from '../../../../../utils/validators/composeValidators';\nexport const technologies = [{\n  value: 'html',\n  label: '#html'\n}, {\n  value: 'css',\n  label: '#css'\n}, {\n  value: 'js',\n  label: '#js'\n}, {\n  value: 'nodejs',\n  label: '#nodejs'\n}, {\n  value: 'python',\n  label: '#python'\n}, {\n  value: 'react',\n  label: '#react'\n}, {\n  value: 'vue',\n  label: '#vue'\n}, {\n  value: 'angular',\n  label: '#angular'\n}];\n\nconst NewSolutionForm = ({\n  setIsModalOpen\n}) => {\n  function sendSolutions(values) {\n    return values;\n  }\n\n  const onSubmit = async values => {\n    try {\n      const data = await sendSolutions(values);\n      console.log(JSON.stringify(data));\n    } catch (error) {\n      return error.message;\n    }\n  };\n\n  const ReviewCheckboxLabelStyles = value => clsx('w-3/4 text-xs text-right', value ? 'text-white' : 'text-gray-600');\n\n  const ReviewCheckboxBoxStyles = value => clsx('flex w-full h-10 mt-10 border rounded-sm items-center px-4 cursor-pointer', value && 'bg-gray-800 text-white');\n\n  return __jsx(Form, {\n    onSubmit: onSubmit,\n    initialValues: {\n      reviewCheckbox: false\n    },\n    render: ({\n      handleSubmit\n    }) => {\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit,\n        action: \"\",\n        className: \"w-full flex flex-col items-start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"w-full lg:w-3/4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, __jsx(Field, {\n        name: \"solutionLinkInput\",\n        validate: composeValidators(required('Pole wymagane'), correctUrlValidator('Wpisz poprawny adres')),\n        render: props => {\n          const {\n            name,\n            value,\n            onChange\n          } = props.input;\n          return __jsx(React.Fragment, null, __jsx(NewSolutionFormInput, {\n            name: name,\n            value: value,\n            onChange: onChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 23\n            }\n          }, \"Link do rozwi\\u0105zania\"), props.meta.error && props.meta.touched && __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 66\n            }\n          }, props.meta.error));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }), __jsx(Field, {\n        name: \"liveLinkInput\",\n        render: props => __jsx(React.Fragment, null, __jsx(NewSolutionFormInput, {\n          name: props.input.name,\n          value: props.input.value,\n          onChange: props.input.onChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 21\n          }\n        }, \"Link do wersji live\"), props.meta.error && props.meta.touched && __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 64\n          }\n        }, props.meta.error)),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }\n      }), __jsx(Field, {\n        name: \"technologiesSelect\",\n        validate: composeValidators(required('Wybierz zastosowane technologie')),\n        render: props => {\n          return __jsx(\"div\", {\n            className: \"flex flex-col pt-4 w-full\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 21\n            }\n          }, __jsx(\"label\", {\n            htmlFor: \"technologiesSelect\",\n            className: \"text-xs mb-1 text-gray-600\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 23\n            }\n          }, \"U\\u017Cyte technologie\"), __jsx(Select, {\n            options: technologies,\n            styles: formStyles,\n            id: \"technologiesSelect\",\n            placeholder: \"Wybierz technologie...\",\n            isMulti: true,\n            name: props.input.name,\n            onChange: props.input.onChange,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 23\n            }\n          }), props.meta.error && props.meta.touched && __jsx(\"span\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 66\n            }\n          }, props.meta.error));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }), __jsx(Field, {\n        name: \"reviewCheckbox\",\n        component: \"input\",\n        type: \"checkbox\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }\n      }, props => {\n        return __jsx(\"div\", {\n          className: ReviewCheckboxBoxStyles(props.input.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }\n        }, __jsx(\"input\", {\n          type: \"checkbox\",\n          name: props.input.name,\n          className: \"w-1/4 cursor-pointer\",\n          onChange: props.input.onChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 23\n          }\n        }), __jsx(\"label\", {\n          htmlFor: \"reviewCheckbox\",\n          className: ReviewCheckboxLabelStyles(props.input.checked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 23\n          }\n        }, \"Pro\\u015Bba o recenzj\\u0119\"));\n      })), __jsx(\"div\", {\n        className: \"w-full border border-gray-200 border-b-1 mt-10\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }), __jsx(\"div\", {\n        className: \"mt-10 w-full flex justify-between\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        type: \"button\",\n        className: \"text-gray-700 hover:underline\",\n        onClick: () => setIsModalOpen(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }\n      }, \"Wr\\xF3\\u0107\"), __jsx(\"div\", {\n        className: \"-mx-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, __jsx(Button, {\n        type: \"submit\",\n        layout: ButtonLayout.Black,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }, \"Wy\\u015Blij\"))));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default NewSolutionForm;","map":{"version":3,"sources":["/home/czechue/Documents/kodifaj-frontend/packages/frontend/components/task/details/solutions/newSolutionForm/NewSolutionForm.tsx"],"names":["React","Button","ButtonLayout","Select","formStyles","clsx","NewSolutionFormInput","Form","Field","correctUrlValidator","required","composeValidators","technologies","value","label","NewSolutionForm","setIsModalOpen","sendSolutions","values","onSubmit","data","console","log","JSON","stringify","error","message","ReviewCheckboxLabelStyles","ReviewCheckboxBoxStyles","reviewCheckbox","handleSubmit","props","name","onChange","input","meta","touched","checked","Black"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Button, { ButtonLayout } from '../../../../shared/button/Button';\nimport Select from 'react-select';\nimport { formStyles } from './formStyles';\nimport clsx from 'clsx';\nimport NewSolutionFormInput from './newSolutionFormInput/NewSolutionFormInput';\nimport { Form, Field } from 'react-final-form';\nimport { correctUrlValidator } from '../../../../../utils/validators/correctUrlValidator';\nimport { required } from '../../../../../utils/validators/requiredValidator';\nimport { composeValidators } from '../../../../../utils/validators/composeValidators';\n\nexport const technologies = [\n  { value: 'html', label: '#html' },\n  { value: 'css', label: '#css' },\n  { value: 'js', label: '#js' },\n  { value: 'nodejs', label: '#nodejs' },\n  { value: 'python', label: '#python' },\n  { value: 'react', label: '#react' },\n  { value: 'vue', label: '#vue' },\n  { value: 'angular', label: '#angular' },\n];\n\ninterface NewSolutionFormProps {\n  setIsModalOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface TechnologiesSelect {\n  label: string;\n  value: string;\n}\ninterface FormValues {\n  solutionLinkInput: string;\n  liveLinkInput?: string;\n  technologiesSelect: TechnologiesSelect[];\n  reviewCheckbox?: boolean;\n}\n\nconst NewSolutionForm: React.FC<NewSolutionFormProps> = ({ setIsModalOpen }) => {\n  function sendSolutions(values: FormValues): FormValues {\n    return values;\n  }\n\n  const onSubmit = async (values: FormValues): Promise<void> => {\n    try {\n      const data = await sendSolutions(values);\n      console.log(JSON.stringify(data));\n    } catch (error) {\n      return error.message;\n    }\n  };\n\n  const ReviewCheckboxLabelStyles = (value?: boolean): string =>\n    clsx('w-3/4 text-xs text-right', value ? 'text-white' : 'text-gray-600');\n\n  const ReviewCheckboxBoxStyles = (value?: boolean): string =>\n    clsx(\n      'flex w-full h-10 mt-10 border rounded-sm items-center px-4 cursor-pointer',\n      value && 'bg-gray-800 text-white',\n    );\n\n  return (\n    <Form\n      onSubmit={onSubmit}\n      initialValues={{ reviewCheckbox: false }}\n      render={({ handleSubmit }): React.ReactNode => {\n        return (\n          <form onSubmit={handleSubmit} action=\"\" className=\"w-full flex flex-col items-start\">\n            <div className=\"w-full lg:w-3/4\">\n              <Field<string>\n                name=\"solutionLinkInput\"\n                validate={composeValidators(\n                  required('Pole wymagane'),\n                  correctUrlValidator('Wpisz poprawny adres'),\n                )}\n                render={(props): JSX.Element => {\n                  const { name, value, onChange } = props.input;\n                  return (\n                    <>\n                      <NewSolutionFormInput name={name} value={value} onChange={onChange}>\n                        Link do rozwiązania\n                      </NewSolutionFormInput>\n                      {props.meta.error && props.meta.touched && <span>{props.meta.error}</span>}\n                    </>\n                  );\n                }}\n              />\n\n              <Field\n                name=\"liveLinkInput\"\n                render={(props): JSX.Element => (\n                  <>\n                    <NewSolutionFormInput\n                      name={props.input.name}\n                      value={props.input.value}\n                      onChange={props.input.onChange}\n                    >\n                      Link do wersji live\n                    </NewSolutionFormInput>\n                    {props.meta.error && props.meta.touched && <span>{props.meta.error}</span>}\n                  </>\n                )}\n              />\n              <Field\n                name=\"technologiesSelect\"\n                validate={composeValidators(required('Wybierz zastosowane technologie'))}\n                render={(props): JSX.Element => {\n                  return (\n                    <div className=\"flex flex-col pt-4 w-full\">\n                      <label htmlFor=\"technologiesSelect\" className=\"text-xs mb-1 text-gray-600\">\n                        Użyte technologie\n                      </label>\n                      <Select\n                        options={technologies}\n                        styles={formStyles}\n                        id=\"technologiesSelect\"\n                        placeholder=\"Wybierz technologie...\"\n                        isMulti\n                        name={props.input.name}\n                        onChange={props.input.onChange}\n                      />\n                      {props.meta.error && props.meta.touched && <span>{props.meta.error}</span>}\n                    </div>\n                  );\n                }}\n              />\n              <Field name=\"reviewCheckbox\" component=\"input\" type=\"checkbox\">\n                {(props): JSX.Element => {\n                  return (\n                    <div className={ReviewCheckboxBoxStyles(props.input.checked)}>\n                      <input\n                        type=\"checkbox\"\n                        name={props.input.name}\n                        className=\"w-1/4 cursor-pointer\"\n                        onChange={props.input.onChange}\n                      />\n                      <label\n                        htmlFor=\"reviewCheckbox\"\n                        className={ReviewCheckboxLabelStyles(props.input.checked)}\n                      >\n                        Prośba o recenzję\n                      </label>\n                    </div>\n                  );\n                }}\n              </Field>\n            </div>\n            <div className=\"w-full border border-gray-200 border-b-1 mt-10\" />\n            <div className=\"mt-10 w-full flex justify-between\">\n              <button\n                type=\"button\"\n                className=\"text-gray-700 hover:underline\"\n                onClick={(): void => setIsModalOpen(false)}\n              >\n                Wróć\n              </button>\n              <div className=\"-mx-4\">\n                <Button type=\"submit\" layout={ButtonLayout.Black}>\n                  Wyślij\n                </Button>\n              </div>\n            </div>\n          </form>\n        );\n      }}\n    />\n  );\n};\n\nexport default NewSolutionForm;\n"]},"metadata":{},"sourceType":"module"}