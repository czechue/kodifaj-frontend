{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Button, { ButtonLayout } from '../../../../shared/button/Button';\nimport Select from 'react-select';\nimport { formStyles } from './formStyles';\nimport clsx from 'clsx';\nimport NewSolutionFormInput from './newSolutionFormInput/NewSolutionFormInput';\nimport { Form, Field } from 'react-final-form';\nimport { correctUrlValidator } from '../../../../../utils/validators/correctUrlValidator';\nimport { required } from '../../../../../utils/validators/requiredValidator';\nimport { composeValidators } from '../../../../../utils/validators/composeValidators';\nexport var technologies = [{\n  value: 'html',\n  label: '#html'\n}, {\n  value: 'css',\n  label: '#css'\n}, {\n  value: 'js',\n  label: '#js'\n}, {\n  value: 'nodejs',\n  label: '#nodejs'\n}, {\n  value: 'python',\n  label: '#python'\n}, {\n  value: 'react',\n  label: '#react'\n}, {\n  value: 'vue',\n  label: '#vue'\n}, {\n  value: 'angular',\n  label: '#angular'\n}];\n\nvar NewSolutionForm = function NewSolutionForm(_ref) {\n  var setIsModalOpen = _ref.setIsModalOpen;\n\n  function sendSolutions(values) {\n    return values;\n  }\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return sendSolutions(values);\n\n            case 3:\n              data = _context.sent;\n              console.log(JSON.stringify(data));\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              return _context.abrupt(\"return\", _context.t0.message);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var ReviewCheckboxLabelStyles = function ReviewCheckboxLabelStyles(value) {\n    return clsx('w-3/4 text-xs text-right', value ? 'text-white' : 'text-gray-600');\n  };\n\n  var ReviewCheckboxBoxStyles = function ReviewCheckboxBoxStyles(value) {\n    return clsx('flex w-full h-10 mt-10 border rounded-sm items-center px-4 cursor-pointer', value && 'bg-gray-800 text-white');\n  };\n\n  return __jsx(Form, {\n    onSubmit: onSubmit,\n    initialValues: {\n      reviewCheckbox: false\n    },\n    render: function render(_ref3) {\n      var handleSubmit = _ref3.handleSubmit;\n      return __jsx(\"form\", {\n        onSubmit: handleSubmit,\n        action: \"\",\n        className: \"w-full flex flex-col items-start\"\n      }, __jsx(\"div\", {\n        className: \"w-full lg:w-3/4\"\n      }, __jsx(Field, {\n        name: \"solutionLinkInput\",\n        validate: composeValidators(required('Pole wymagane'), correctUrlValidator('Wpisz poprawny adres')),\n        render: function render(props) {\n          var _props$input = props.input,\n              name = _props$input.name,\n              value = _props$input.value,\n              onChange = _props$input.onChange;\n          return __jsx(React.Fragment, null, __jsx(NewSolutionFormInput, {\n            name: name,\n            value: value,\n            onChange: onChange\n          }, \"Link do rozwi\\u0105zania\"), props.meta.error && props.meta.touched && __jsx(\"span\", null, props.meta.error));\n        }\n      }), __jsx(Field, {\n        name: \"liveLinkInput\",\n        render: function render(props) {\n          return __jsx(React.Fragment, null, __jsx(NewSolutionFormInput, {\n            name: props.input.name,\n            value: props.input.value,\n            onChange: props.input.onChange\n          }, \"Link do wersji live\"), props.meta.error && props.meta.touched && __jsx(\"span\", null, props.meta.error));\n        }\n      }), __jsx(Field, {\n        name: \"technologiesSelect\",\n        validate: composeValidators(required('Wybierz zastosowane technologie')),\n        render: function render(props) {\n          return __jsx(\"div\", {\n            className: \"flex flex-col pt-4 w-full\"\n          }, __jsx(\"label\", {\n            htmlFor: \"technologiesSelect\",\n            className: \"text-xs mb-1 text-gray-600\"\n          }, \"U\\u017Cyte technologie\"), __jsx(Select, {\n            options: technologies,\n            styles: formStyles,\n            id: \"technologiesSelect\",\n            placeholder: \"Wybierz technologie...\",\n            isMulti: true,\n            name: props.input.name,\n            onChange: props.input.onChange\n          }), props.meta.error && props.meta.touched && __jsx(\"span\", null, props.meta.error));\n        }\n      }), __jsx(Field, {\n        name: \"reviewCheckbox\",\n        component: \"input\",\n        type: \"checkbox\"\n      }, function (props) {\n        return __jsx(\"div\", {\n          className: ReviewCheckboxBoxStyles(props.input.checked)\n        }, __jsx(\"input\", {\n          type: \"checkbox\",\n          name: props.input.name,\n          className: \"w-1/4 cursor-pointer\",\n          onChange: props.input.onChange\n        }), __jsx(\"label\", {\n          htmlFor: \"reviewCheckbox\",\n          className: ReviewCheckboxLabelStyles(props.input.checked)\n        }, \"Pro\\u015Bba o recenzj\\u0119\"));\n      })), __jsx(\"div\", {\n        className: \"w-full border border-gray-200 border-b-1 mt-10\"\n      }), __jsx(\"div\", {\n        className: \"mt-10 w-full flex justify-between\"\n      }, __jsx(\"button\", {\n        type: \"button\",\n        className: \"text-gray-700 hover:underline\",\n        onClick: function onClick() {\n          return setIsModalOpen(false);\n        }\n      }, \"Wr\\xF3\\u0107\"), __jsx(\"div\", {\n        className: \"-mx-4\"\n      }, __jsx(Button, {\n        type: \"submit\",\n        layout: ButtonLayout.Black\n      }, \"Wy\\u015Blij\"))));\n    }\n  });\n};\n\nexport default NewSolutionForm;","map":null,"metadata":{},"sourceType":"module"}